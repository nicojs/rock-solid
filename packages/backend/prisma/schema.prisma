// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
  output        = "../generated/prisma"
}

model Persoon {
  id                  Int              @id @default(autoincrement())
  voornaam            String?
  achternaam          String
  volledigeNaam       String
  emailadres          String?
  verblijfadresId     Int?
  verblijfadres       Adres?           @relation(name: "verblijfadres", fields: [verblijfadresId], references: [id])
  domicilieadresId    Int?
  domicilieadres      Adres?           @relation(name: "domicilieadres", fields: [domicilieadresId], references: [id])
  geboortedatum       DateTime?
  geboorteplaats      String?
  geslacht            Int?
  geslachtOpmerking   String?
  rekeningnummer      String?
  rijksregisternummer String?
  telefoonnummer      String?
  gsmNummer           String?
  opmerking           String?
  type                Int
  foldervoorkeuren    Foldervoorkeur[]

  // Deelnemer
  woonsituatie                 Int?
  woonsituatieOpmerking        String?
  werksituatie                 Int?
  opleidingsvorm               Int?
  werksituatieOpmerking        String?
  voedingswens                 Int?
  voedingswensOpmerking        String?
  emailadres2                  String?
  begeleidendeDienst           String?
  contactpersoon               String?
  contactpersoonTelefoon       String?
  contactpersoonGsm            String?
  contactpersoonEmail          String?
  aanmeldingen                 Aanmelding[]
  eersteCursusAanmelding       Aanmelding?  @relation("eersteCursusAanmelding", fields: [eersteCursusAanmeldingId], references: [id])
  eersteCursusAanmeldingId     Int?
  eersteVakantieAanmelding     Aanmelding?  @relation("eersteVakantieAanmelding", fields: [eersteVakantieAanmeldingId], references: [id])
  eersteVakantieAanmeldingId   Int?
  toestemmingFotosFolder       Boolean      @default(false)
  toestemmingFotosWebsite      Boolean      @default(false)
  toestemmingFotosSocialeMedia Boolean      @default(false)
  toestemmingFotosNieuwsbrief  Boolean      @default(false)
  toestemmingFotosInfoboekje   Boolean      @default(false)

  // OverigePersonen
  selectie           OverigPersoonSelectie[]
  begeleidtProjecten Project[]
}

model OverigPersoonSelectie {
  overigPersoonId Int
  selectie        Int
  overigPersoon   Persoon @relation(fields: [overigPersoonId], references: [id], onDelete: Cascade)

  @@id([overigPersoonId, selectie])
}

model Adres {
  id         Int     @id @default(autoincrement())
  plaats     Plaats  @relation(fields: [plaatsId], references: [id])
  straatnaam String
  huisnummer String
  busnummer  String?
  plaatsId   Int

  verblijfpersonen     Persoon[]            @relation("verblijfadres")
  domiciliepersonen    Persoon[]            @relation("domicilieadres")
  organisatieContacten OrganisatieContact[]
  cursusLocaties       Locatie[]
}

model Plaats {
  id            Int    @id @default(autoincrement())
  deelgemeente  String
  gemeente      String
  postcode      String
  volledigeNaam String
  provincieId   Int

  Adressen     Adres[]
  Aanmeldingen Aanmelding[]

  @@unique([postcode, deelgemeente])
  @@index(deelgemeente)
  @@index(gemeente)
  @@index(provincieId)
}

model Project {
  id            Int          @id @default(autoincrement())
  projectnummer String       @unique
  naam          String
  titel         String
  type          Int
  activiteiten  Activiteit[]
  aanmeldingen  Aanmelding[]
  begeleiders   Persoon[]
  jaar          Int
  saldo         Decimal?

  // Cursus
  organisatieonderdeel Int?
  doelgroep            Int?
  categorie            Int?

  // Vakantie. Total price is saldo + voorschot
  bestemming String?
  land       String?
  seizoen    Int?
  voorschot  Decimal?
}

model Aanmelding {
  id                           Int        @id @default(autoincrement())
  projectId                    Int
  project                      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  deelnemerId                  Int?
  deelnemer                    Persoon?   @relation(fields: [deelnemerId], references: [id])
  deelnames                    Deelname[]
  rekeninguittrekselNummer     String?
  tijdstipVanAanmelden         DateTime   @default(now())
  status                       Int        @default(0)
  opmerking                    String?
  bevestigingsbriefVerzondenOp DateTime?
  vervoersbriefVerzondenOp     DateTime?

  // Fields copied from deelnemer when created
  plaats                     Plaats?   @relation(fields: [plaatsId], references: [id])
  plaatsId                   Int?
  werksituatie               Int?
  woonsituatie               Int?
  geslacht                   Int?
  eersteCursusAanmeldingen   Persoon[] @relation("eersteCursusAanmelding")
  eersteVakantieAanmeldingen Persoon[] @relation("eersteVakantieAanmelding")

  @@unique([projectId, deelnemerId])
}

model Activiteit {
  id               Int        @id @default(autoincrement())
  project          Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId        Int
  van              DateTime
  totEnMet         DateTime
  vormingsuren     Float?
  begeleidingsuren Float?
  deelnames        Deelname[]

  // Cursussen
  locatieId Int?
  locatie   Locatie? @relation(fields: [locatieId], references: [id])

  // Vakanties
  verblijf Int?
  vervoer  Int?
}

model Locatie {
  id        Int     @id @default(autoincrement())
  naam      String  @unique
  adresId   Int?
  adres     Adres?  @relation(fields: [adresId], references: [id])
  opmerking String?

  Activiteit Activiteit[]
}

model Deelname {
  id                         Int        @id @default(autoincrement())
  aanmelding                 Aanmelding @relation(fields: [aanmeldingId], references: [id], onDelete: Cascade)
  aanmeldingId               Int
  activiteit                 Activiteit @relation(fields: [activiteitId], references: [id], onDelete: Cascade)
  activiteitId               Int
  effectieveDeelnamePerunage Float
  opmerking                  String?

  @@unique([aanmeldingId, activiteitId])
}

model Organisatie {
  id             Int                  @id @default(autoincrement())
  naam           String               @unique
  website        String?
  soorten        Organisatiesoort[]
  soortOpmerking String?
  contacten      OrganisatieContact[]
}

model Organisatiesoort {
  organisatieId Int
  soort         Int
  organisatie   Organisatie @relation(fields: [organisatieId], references: [id], onDelete: Cascade)

  @@id([organisatieId, soort])
}

model OrganisatieContact {
  id               Int              @id @default(autoincrement())
  organisatieId    Int
  terAttentieVan   String
  afdeling         String?
  emailadres       String?
  telefoonnummer   String?
  adres            Adres?           @relation(fields: [adresId], references: [id])
  adresId          Int?
  opmerking        String?
  foldervoorkeuren Foldervoorkeur[]
  organisatie      Organisatie      @relation(fields: [organisatieId], references: [id], onDelete: Cascade)
}

model Foldervoorkeur {
  id                   Int                 @id @default(autoincrement())
  communicatie         Int
  folder               Int
  organisatieContactId Int?
  persoonId            Int?
  organisatieContact   OrganisatieContact? @relation(fields: [organisatieContactId], references: [id])
  persoon              Persoon?            @relation(fields: [persoonId], references: [id])

  @@unique([folder, persoonId])
  @@unique([folder, organisatieContactId])
  @@index([folder])
}
